{
    "__references": [
        "NOTE: This is not a valid grammar node, but aims to serve as an index of references used to maintain this file!",
        "",
        "Language Grammars:",
        "https://macromates.com/manual/en/language_grammars",
        "",
        "VSCode Syntax Highlighting Guideline:",
        "https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide",
        "",
        "Reserved Keywords + Types:",
        "https://solidity.readthedocs.io/en/v0.5.8/miscellaneous.html",
        "",
        "Reserved Functions/Access Variables + Units and Global Variables",
        "https://solidity.readthedocs.io/en/v0.5.8/units-and-global-variables.html"
    ],
    "scopeName": "source.solidity",
    "patterns": [
        {
            "include": "#_deprecated"
        },
        {
            "include": "#builtin"
        },
        { 
            "include": "#comments" 
        },
        {
            "include": "#constants"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "_deprecated": {
            "patterns": [
                {
                    "name": "invalid.deprecated.functions",
                    "match": "\\b(suicide|sha3)\\b"
                },
                {
                    "name": "invalid.deprecated.nodes",
                    "match": "\\b(throw)\\b"
                },
                {
                    "name": "invalid.deprecated.variables",
                    "match": "\\b(block\\.blockhash|msg\\.gas)\\b"
                }
            ]
        },
        "builtin": {
            "patterns": [
                {
                    "include": "#builtin-types"
                },
                {
                    "include": "#builtin-functions"
                },
                {
                    "include": "#builtin-variables"
                }
            ]
        },
        "builtin-types": {
            "name": "support.type.builtin",
            "match": "\\b(address|bool|mapping|u?int\\d{0,3}|(?:bytes|string)(?:3[0-2]|[12][0-9]|[1-9])?)\\b"
        },
        "builtin-functions": {
            "patterns": [
                {
                    "name": "keyword.other.exceptions",
                    "match": "\\b(assert|require|revert)\\b"
                },
                {
                    "name": "keyword.other.selfdestruct",
                    "match": "\\b(selfdestruct|suicide)\\b"
                },
                {
                    "name": "keyword.other.crypto",
                    "match": "\\b(sha3|keccak256|blockhash|sha256|ripemd160|ecrecover|addmod|mulmod)\\b"
                },
                {
                    "name":  "keyword.other.other",
                    "match": "\\b(type)\\b"
                }
            ]
        },
        "builtin-variables": {
            "patterns": [
                {
                    "name": "variable.language.members.block",
                    "match": "\\b(block\\.(?:coinbase|difficulty|gaslimit|number|timestamp))\\b"
                },
                {
                    "name": "variable.language.members.msg",
                    "match": "\\b(msg\\.(?:data|sender|sig|value))\\b"
                },
                {
                    "name": "variable.language.members.tx",
                    "match": "\\b(tx\\.(?:gasprice|origin))\\b"
                },
                {
                    "name": "variable.language.toplevel",
                    "match": "\\b(abi|block|msg|now|tx)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash",
                    "match": "//.*?$"
                },
                {
                    "name": "comment.block",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "include": "#constant-boolean"
                },
                {
                    "include": "#constant-integers"
                },
                {
                    "include": "#constant-units-ether"
                },
                {
                    "include": "#constant-units-time"
                }
            ]
        },
        "constant-boolean": {
            "name": "constant.language.boolean",
            "match": "\\b(true|false)\\b"
        },
        "constant-integers" : {
            "patterns": [
                {
                    "name": "constant.numeric.integer.decimal",
                    "match": "\\b(\\d+)\\b"
                },
                {
                    "name": "constant.numeric.integer.hex",
                    "match":  "\\b(0x[0-9a-fA-F]+)\\b"
                }
            ]
        },
        "constant-units-ether": {
            "name": "constant.language.units.ether",
            "match": "\\b(wei|finney|szabo|ether)\\b"
        },
        "constant-units-time": {
            "name": "constant.language.units.time",
            "match": "\\b(seconds|minutes|hours|days|weeks|years)\\b"
        },
        "keywords": {
            "patterns": [
                {
                    "include": "#keyword-pragma"
                },
                {
                    "include": "#keyword-import"
                },
                {
                    "include": "#keyword-using"
                },
                {
                    "include": "#keyword-instance-action"
                }, 
                {
                    "include": "#keyword-control-flow"
                },
                {
                    "include": "#keyword-collection-enumeration"
                },
                {
                    "include": "#keyword-other"
                }
            ]
        },
        "keyword-pragma": {
            "match": "\\s*(pragma)\\s+(\\S+)\\s+(.+)\\s*;",
            "captures": {
                "1": {
                    "name": "keyword.other.pragma.pragma"
                },
                "2": {
                    "name": "keyword.other.pragma.type"
                },
                "3": {
                    "name": "constant.other.pragma.value"
                }
            }
        },
        "keyword-import": {
            "name": "keyword.other.import",
            "match": "\\b(import)\\b"
        },
        "keyword-using": {
            "match": "\\b(using)\\s+(\\S+)\\s+(for)",
            "captures": {
                "1": {
                    "name": "keyword.other.using.using"
                },
                "3": {
                    "name": "keyword.other.using.for"
                }
            }
        },
        "keyword-control-flow": {
            "name": "keyword.control.flow",
            "match": "\\b(if|else|for|break|continue|return|returns|throw|do|while|switch|try|catch)\\b"
        },
        "keyword-instance-action": {
            "name": "keyword.other.instance.action",
            "match": "\\b(new|delete|emit)\\b"
        },
        "keyword-collection-enumeration": {
            "name": "keyword.other.enumeration",
            "match": "\\b(in|of)\\b"
        },
        "keyword-other": {
            "name": "keyword.other.other",
            "match": "\\b(from|as|is)\\b"
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.single.decimal",
                    "match": "'.*'"
                },
                {
                    "name": "string.quoted.double.decimal",
                    "match": "\".*\""
                }
            ]
        }
    }
}